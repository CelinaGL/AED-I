https://www.cs.usfca.edu/~galles/visualization/AVLtree.html

int Altura( struct TreeNode* root ) {
    int esq, dir;

    if ( root == NULL ) {
        return 0;
    }

    esq = Altura( root->left );  
    dir = Altura( root->right );

    if ( esq > dir ) {
        return esq + 1; 
    } else { 
        return dir + 1;
    }
}

int FB( struct TreeNode* root ) {
    if ( root == NULL ){
        return 0;
    }
    return Altura( root->left ) - Altura( root->right );
}

int Balanceamento(TNo** ppRaiz) {
    int fb = FB(*ppRaiz);

    if ( fb > 1)
        return BalancaEsquerda(ppRaiz);
    else if (fb < -1 )
        return BalancaDireita(ppRaiz);
    else
        return 0;
}

//Rotação simples esquerda e direita
void RSE( TNo **ppRaiz ) {
    TNo *pAux;

    pAux = (*ppRaiz)->pDir;
    (*ppRaiz)->pDir = pAux->pEsq;
    pAux->pEsq = (*ppRaiz);
    (*ppRaiz) = pAux;
}

void RSD(TNo **ppRaiz){
    TNo *pAux;

    pAux = (*ppRaiz)->pEsq;
    (*ppRaiz)->pEsq = pAux->pDir;
    pAux->pDir = (*ppRaiz);
    (*ppRaiz) = pAux;
}

//Rotações Duplas

int BalancaEsquerda( TNo **ppRaiz ) {
    int fbe = FB ( (*ppRaiz)->pEsq );

    if ( fbe > 0 ) {
        RSD(ppRaiz);
        return 1;
    } else if (fbe < 0 ) { 
        /* Rotação Dupla Direita */

        RSE( &((*ppRaiz)->pEsq) );
        RSD( ppRaiz );          /* &(*ppRaiz) */

        return 1;
    }

    return 0;
}

int BalancaDireita( TNo **ppRaiz ) {
    int fbd = FB( (*ppRaiz)->pDir );
    
    if ( fbd < 0 ) {
        RSE (ppRaiz);
        return 1;
    } else if (fbd > 0 ) { 
        /* Rotação Dupla Esquerda */

        RSD( &((*ppRaiz)->pDir) );
        RSE( ppRaiz );          /* &(*ppRaiz) */

        return 1;
    }

    return 0;
}

//Inserir

int Insere( TNo** ppRaiz, Registro* x ) {
    if (*ppRaiz == NULL) {

        *ppRaiz = (TNo*)malloc(sizeof(TNo));
        (*ppRaiz)->Reg = *x;
        (*ppRaiz)->pEsq = NULL;
        (*ppRaiz)->pDir = NULL;
        return 1;

    } else if ( (*ppRaiz)->Reg.chave > x->chave ) {

            if ( Insere(&(*ppRaiz)->pEsq,x ) ) {

                if (Balanceamento(ppRaiz))
                    return 0;
                else
                return 1;

            }
        } else if ( (*ppRaiz)->Reg.chave < x->chave ) {

                if ( Insere(&(*ppRaiz)->pDir,x) ) {

                    if (Balanceamento(ppRaiz))
                        return 0;
                    else
                        return 1;

                } else
                    return 0;

            } else
                return 0; /* valor jah presente */
}

//Verificação

int EhArvoreArvl(TNo* pRaiz) {
    int fb;

    if (pRaiz == NULL)
        return 1;

    if (!EhArvoreArvl(pRaiz->pEsq))
        return 0;

    if (!EhArvoreArvl(pRaiz->pDir))
        return 0;

    fb = FB (pRaiz);

    if ( ( fb > 1 ) || ( fb < -1) )
        return 0;
    else
        return 1;

}